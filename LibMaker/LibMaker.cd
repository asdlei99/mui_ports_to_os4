;
; LibMaker.catalog
;
; Catalog Description generated by CatEdit
; CatEdit is © Rafael D'Halleweyn
;
MSG_LIBRARY_CODE_GENERATOR (0//)
Library code generator
;
MSG_ABOUT (1//)
About...
;
MSG_QUIT (2//)
Quit
;
MSG_GENERATE_CODE (3//)
Generate Code
;
MSG_LIBRARY_NAME (4//)
Library Name:
;
MSG_DESTINATION_DRAWER (5//)
Destination Drawer:
;
MSG_SELECT_DESTINATION_DRAWER (6//)
Select Destination Drawer
;
MSG_LIBRARY_NAME_USE_SMALL_LETTERS_OF_ENGLISH_ALPHABET_DIGITS_DOT_HYPHEN_AND_UNDERSCORE (7//)
Library name. Use small letters of English alphabet, digits, dot, hyphen and underscore.
;
MSG_CODE_WILL_BE_GENERATED_TO_THIS_DRAWER_NO_SUBDRAWER_WILL_BE_CREATED (8//)
Code will be generated to this drawer. No subdrawer will be created.
;
MSG_STARTS_THE_CODE_GENERATOR (9//)
Starts the code generator.
;
MSG_VERSION (10//)
Version:
;
MSG_LIBRARY_MAJOR_VERSION_NUMBER_SHOULD_BE_A_NUMBER_BETWEEN_1_AND_65535_MAJOR_VERSION_SHOULD_BE_INCREMENTED_WHEN_NEW (11//)
Library major version number. Should be a number between 1 and 65535. Major version should be incremented when new functions are added to the library API.
;
MSG_REVISION (12//)
Revision:
;
MSG_LIBRARY_MINOR_VERSION_NUMBER_SHOULD_BE_A_NUMBER_BETWEEN_1_AND_65535_MINOR_VERSION_SHOULD_BE_INCREMENTED_WITH_EVERY (13//)
Library minor version number. Should be a number between 1 and 65535. Minor version should be incremented with every release, if major version is not changed.
;
MSG_DATE (14//)
Date:
;
MSG_LIBRARY_RELEASE_DATE_IN_DDMMYYYY_FORMAT_WITH_LEADING_ZEROS_FOR_DAY_AND_MONTH (15//)
Library release date in DD.MM.YYYY format with leading zeros for day and month.
;
MSG_COPYRIGHT_STRING (16//)
Copyright String:
;
MSG_LIBRARY_COPYRIGHT_MESSAGE_PLACED_IN_THE_VERSION_STRING_LIMITED_TO_64_CHARACTERS (17//)
Library copyright message placed in the version string. Limited to 64 characters.
;
MSG_LIBRARY_FUNCTIONS (18//)
Library Functions
;
MSG_CRESULT_TYPE (19//)
\ecResult Type
;
MSG_CNAME (20//)
\ecName
;
MSG_CARGUMENTS (21//)
\ecArguments
;
MSG_ADD (22//)
Add
;
MSG_DELETE (23//)
Delete
;
MSG_ADDS_A_NEW_FUNCTION_TO_THE_LIBRARY (24//)
Adds a new function to the library.
;
MSG_DELETES_A_SELECTED_FUNCTION_FROM_THE_LIBRARY (25//)
Deletes a selected function from the library.
;
MSG_DOUBLECLICK_TO_EDIT_A_FUNCTION_CHANGE_ORDER_WITH_DRAG_AND_DROP (26//)
Doubleclick to edit a function. Change order with drag and drop.
;
MSG_FUNCTION_NAME (27//)
Function Name:
;
MSG_FUNCTION_NAME_SHOULD_FOLLOW_C_LANGUAGE_RULES_USUALLY_MORPHOS_API_FUNCTIONS_HAVE_CAPITALIZED_FIRST_LETTER_OF_EACH_WORD (28//)
Function name should follow C language rules. Usually MorphOS API functions have capitalized first letter of each word. Adding a short prefix to all the functions of a library helps to avoid name conflicts.
;
MSG_RESULT_TYPE (29//)
Result Type:
;
MSG_LIBRARY_FUNCTIONS_SHOULD_RETURN_EITHER_PRIMITIVE_TYPES_OR_POINTERS_MORPHOS_TYPES_IN_THE_DROPDOWN_LIST_ARE_PREFERRED_OVER (30//)
Library functions should return either primitive types or pointers. MorphOS types in the dropdown list are preferred over standard C types. Internal library structures should not be exposed without a good reason, but returned as APTR (void pointer).
;
MSG_SAVE (31//)
Save
;
MSG_STORES_CHANGES_IN_THE_FUNCTION_LIST_TO_CANCEL_CHANGES_JUST_CLOSE_THE_WINDOW (32//)
Stores changes in the function list. To cancel changes just close the window.
;
MSG_FUNCTION_ARGUMENTS (33//)
Function Arguments
;
MSG_DELETE2 (37//)
Delete
;
MSG_DELETES_SELECTED_ARGUMENT (38//)
Deletes selected argument.
;
MSG_ARGUMENT_TYPE (39//)
Argument Type:
;
MSG_LIBRARY_FUNCTIONS_SHOULD_TAKE_EITHER_PRIMITIVE_TYPES_OR_POINTERS_AS_ARGUMENTS_MORPHOS_TYPES_IN_THE_DROPDOWN_LIST_ARE (40//)
Library functions should take either primitive types or pointers as arguments. MorphOS types in the dropdown list are preferred over standard C types.
;
MSG_FORMAL_NAME (41//)
Formal Name:
;
MSG_FORMAL_NAME_FOR_THE_ARGUMENT_USED_IN_HEADER_FILES_AND_FUNCTION_CODE_TEMPLATE_THE_NAME_MUST_FOLLOW_C_RULES_FOR_NAMING (42//)
Formal name for the argument used in header files and function code template. The name must follow C rules for naming variables and should be lowercase.
;
MSG_ARGUMENTS_ORDER_MAY_BE_CHANGED_WITH_DRAG_AND_DROP_USING_MORE_THAN_10_ARGUMENTS_IN_MORPHOS_API_IS_NOT_RECOMMENDED (43//)
Arguments order may be changed with drag and drop. Using more than 10 arguments in MorphOS API is not recommended. Consider taglists for passing more arguments, also for optional ones.
;
MSG_PROJECT (46//)
Project
;
MSG_OPEN (47//)
Open...
;
MSG_SAVE2 (48//)
Save
;
MSG_SAVE_AS (49//)
Save as...
;
MSG_LIBRARY_BASE_NAME_IT_IS_A_C_LANGUAGE_VARIABLE_SO_MUST_FOLLOW_LANGUAGE_RULES_IT_SHOULD_BE_NAMED_AFTER_THE_LIBRARY (58//)
Library base name. It is a C language variable, so must follow language rules. It should be named after the library, capitalized, and end with "Base", for example "FooBarBase".
;
MSG_USE_ALTIVEC (59//)
Use AltiVec
;
MSG_ADDS_ALTIVEC_COMPILER_FLAGS_TO_THE_MAKEFILE_ADDS_NECCESARY_INCLUDE_FILES_ADDS_ALTIVEC_DETECTION_CODE_TO_THE_LIBRARY (60//)
Adds AltiVec compiler flags to the makefile. Adds neccesary include files. Adds AltiVec detection code to the library initialization and sets 'HaveAltiVec' field in the library base accordingly. Note that non-AltiVec version of the code should be always provided.
;
MSG_BOOPSI_CLASS (61//)
BOOPSI Class
;
MSG_TURNS_THE_LIBRARY_INTO_AN_EXTERNAL_PUBLIC_BOOPSI_CLASS_THE_CLASS_IS_ADDED_TO_THE_SYSTEM_DURING_LIBRARY_INITIALIZATION (62//)
Turns the library into an external public BOOPSI class. The class is added to the system during library initialization. Class methods and attributes may be edited in the class editor, which is opened with the button.
;
MSG_MUI_CLASS (63//)
MUI Class
;
MSG_TURNS_THE_LIBRARY_INTO_AN_EXTERNAL_PUBLIC_MUI_CLASS_CLASS_METHODS_AND_ATTRIBUTES_MAY_BE_EDITED_IN_THE_CLASS_EDITOR_WHICH (64//)
Turns the library into an external public MUI class. Class methods and attributes may be edited in the class editor, which is opened with the button.
;
MSG_SAVE3 (65//)
Save
;
MSG_STORES_CHANGES_IN_THE_CLASS_TO_CANCEL_CHANGES_JUST_CLOSE_THE_WINDOW (66//)
Stores changes in the class. To cancel changes just close the window.
;
MSG_SUPERCLASS (68//)
Superclass:
;
MSG_CLASS_ATTRIBUTES (69//)
Class Attributes
;
MSG_ADD2 (70//)
Add
;
MSG_ADDS_A_NEW_ATTRIBUTE_TO_THE_CLASS_WITH_PROPERTIES_TAKEN_FROM_THE (71//)
Adds a new attribute to the class, with properties taken from the
;
MSG_DELETE3 (72//)
Delete
;
MSG_DELETES_SELECTED_ATTRIBUTE_FROM_THE_CLASS (73//)
Deletes selected attribute from the class.
;
MSG_CLASS_METHODS (74//)
Class Methods
;
MSG_NAME (81//)
Name:
;
MSG_IDENTIFIER (82//)
Identifier:
;
MSG_USAGE (83//)
Usage:
;
MSG_INIT (84//)
Init
;
MSG_SET (85//)
Set
;
MSG_GET (86//)
Get
;
MSG_CODE_GENERATOR (94//)
Code Generator
;
MSG_EVERY_FUNCTION_IN_A_SEPARATE_FILE (95//)
Every function in a separate file
;
MSG_WHEN_CHECKED_EVERY_LIBRARY_FUNCTION_SKELETON_IS_GENERATED_INTO_A_SEPARATE_FILE_WITH_NAME_STARTING_FROM_F_FOLLOWED_BY_THE (96//)
When checked, every library function skeleton is generated into a separate file with name starting from "f_" followed by the function name. Makefile is modified accordingly. If not checked, all the functions are placed in "library.c" file.
;
MSG_EVERY_CLASS_METHOD_IN_A_SEPARATE_FILE (97//)
Every class method in a separate file
;
MSG_WHEN_CHECKED_EVERY_CLASS_METHOD_SKELETON_INCLUDING_STANDARD_METHODS_IS_GENERATED_INTO_A_SEPARATE_FILE_WITH_NAME_STARTING (98//)
When checked, every class method skeleton (including standard methods) is generated into a separate file with name starting from "m_" followed by the method name. Makefile is modified accordingly. If not checked, all the functions are placed in "methods.c" file. Note that the class dispatcher is always placed in "library.c".
;
MSG_GENERATOR_SCRIPT_SET (99//)
Generator Script Set:
;
MSG_DIFFERENT_SCRIPT_SETS_GENERATE_CODE_FOR_DIFFERENT_OPERATING_SYSTEMS_OR_USE_DIFFERENT_CODING_STYLES_SETS_OF_MACROS_ETC (100//)
Different script sets generate code for different operating systems or use different coding styles, sets of macros, etc. Every set is placed in a subdirectory of "scripts" dir. This directory is scanned at program startup.
;
MSG_INSTALLATION_DRAWER (103//)
Installation Drawer:
;
MSG_SELECT_INSTALLATION_DRAWER (104//)
Select Installation Drawer
;
MSG_THIS_DRAWER_IS_USED_IN_MAKEFILE_GENERATION_FOR_INSTALL_TARGET_COMPILED_LIBRARY_OR_CLASS_WILL_BE_COPIED_TO_THIS_DIRECTORY (105//)
This drawer is used in makefile generation for "install" target. Compiled library or class will be copied to this directory when "make install" is performed, then flushed from memory if possible.
;
MSG_INCLUDE_PATH (106//)
Include Path:
;
MSG_LOCATION_OF_THE_MAIN_PUBLIC_LIBRARY_CLASS_HEADER_FILE_IN_THE_SYSTEM_INCLUDES_TREE_THE_FILE_CONTAINS_DEFINITIONS_OF (107//)
Location of the main public library/class header file in the system includes tree. The file contains definitions of structures, constants, tags, attributes and methods. The location is used to proprely include the file in code files. For plain libraries usual location is just "libraries", for classes it is "classes" or a subdirectory of "classes". For MUI classes, the location is "mui".
;
MSG_M68K_REGISTER (108//)
M68k Register:
;
MSG_LIBRARIES_FOR_AMIGAOS_3_OR_LIBRARIES_FOR_AMIGAOS_4_AND_MORPHOS_CALLABLE_FROM_M68K_CODE_HAVE_PROCESSOR_REGISTERS_ASSIGNED (110//)
Libraries for AmigaOS 3, or libraries for AmigaOS 4 and MorphOS callable from M68k code, have processor registers assigned to function arguments. Use data registers for numbers, address registers for pointers.
;
MSG_LIBRARY_BASE_NAME (109//)
Library Base Name:
;
